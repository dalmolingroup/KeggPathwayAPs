theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "kk"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "eigen"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
head(layout)
attributes(layout)
customLayout_ = "stress"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "fr"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "lgl"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "graphopt"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "circlepack"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
customLayout_ = "treemap"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
customLayout_ = "matrix"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
customLayout_ = "fabric"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
install.packages("snahelper")
customLayout_ = "sparse_stress"
snahelper:::SNAhelperAddin()
customLayout_ = "sparse_stress"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
customLayout_ = "gem"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=1,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
options(ggrepel.max.overlaps = Inf)
customLayout_ = "gem"
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
layout <- create_layout(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else if (customLayout_ == "centrality") {
layout <- create_layout(iGraph, layout = customLayout_, centrality = betweenness)
} else {
layout <- create_layout(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(layout)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
strength=2,
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm'),
show.legend = NA) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("", values = c('grey66', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
View(layout)
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
snahelper:::NetbuilderAddin()
snahelper:::NetreaderAddin()
snahelper:::ComponentlayouterAddin()
snahelper:::ComponentlayouterAddin()
snahelper:::SNAhelperAddin()
