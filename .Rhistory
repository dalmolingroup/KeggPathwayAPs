scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = isAP),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = isAP),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
#geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
#                shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
vertices$AP_classification <- ""
# Apply the border color by bottleneck status
if (sum(vertices$isAP == 0, na.rm = T) > 0) {
vertices$color.border[which(vertices$isAP == 0)] <- "#ffffff"
vertices$borderWidth[which(vertices$isAP == 0)] <- 1 # Node border width
vertices$AP_classification <- "AP"
}
if (sum(vertices$isAP == 1, na.rm = T) > 0) {
vertices$color.border[which(vertices$isAP == 1)] <- "#005b96"
vertices$borderWidth[which(vertices$isAP == 1)] <- 2 # AP Node border width
vertices$AP_classification <- "Non-AP"
}
# Apply the border color by bottleneck status
if (sum(vertices$isAP == 0, na.rm = T) > 0) {
vertices$color.border[which(vertices$isAP == 0)] <- "#ffffff"
vertices$borderWidth[which(vertices$isAP == 0)] <- 1 # Node border width
vertices$AP_classification <- "Non-AP"
}
if (sum(vertices$isAP == 1, na.rm = T) > 0) {
vertices$color.border[which(vertices$isAP == 1)] <- "#005b96"
vertices$borderWidth[which(vertices$isAP == 1)] <- 2 # AP Node border width
vertices$AP_classification <- "AP"
}
vertices$isAP
# Apply the border color by bottleneck status
if (sum(vertices$isAP == 0, na.rm = T) > 0) {
vertices$color.border[which(vertices$isAP == 0)] <- "#ffffff"
vertices$borderWidth[which(vertices$isAP == 0)] <- 1 # Node border width
vertices$AP_classification[which(vertices$isAP == 0)] <- "Non-AP"
}
if (sum(vertices$isAP == 1, na.rm = T) > 0) {
vertices$color.border[which(vertices$isAP == 1)] <- "#005b96"
vertices$borderWidth[which(vertices$isAP == 1)] <- 2 # AP Node border width
vertices$AP_classification[which(vertices$isAP == 1)] <- "AP"
}
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#-----------------------------#
# [GENERATE THE GRAPH OBJECT] #
#-----------------------------#
iGraph <- igraph::graph_from_data_frame(relations, directed = FALSE, vertices = vertices)
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
relations$reaction1Status
sum(is.na(relations$reaction1Status), na.rm = T)
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
#geom_edge_fan(aes(colour = reaction1Status),
geom_edge_fan(edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
View(staticGraph)
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
edge_color
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph()
staticGraph
#------------------#
# [PLOT THE GRAPH] #
#------------------#
# Validate the used layout since the sparse stress require additional parameters
if (customLayout_ == "sparse_stress") {
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
} else {
staticGraph <- ggraph(iGraph, layout = customLayout_)
}
staticGraph <- ggraph(iGraph, layout = customLayout_, pivots = nrow(vertices), weights = NA)
staticGraph <- staticGraph +
# Edges
geom_edge_fan(aes(colour = edge_color),
edge_alpha = 0.5,
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(2, 'mm'), type = 'closed'),
end_cap = circle(3, 'mm')) +
# Nodes
geom_node_point(aes(fill = betweenness, size = vertex_size, stroke = borderWidth, colour = AP_classification),
shape=21, alpha = 1) +
# Nodes label
geom_node_text(aes(filter = vertex_size >= 0, label = label),
size = 3, family="serif", repel = TRUE, check_overlap = TRUE,
nudge_y = -0.19) +
# Nodes customization
scale_fill_gradientn("Betweenness", colours = brewer.pal(9, "YlOrBr"), limits=c(min(vertices$betweenness), max(vertices$betweenness))) +
scale_color_manual("AP classification", values = c('blue', 'black')) +
# Edges customization
scale_edge_color_manual("Reaction status", values = c('#ff7b7b', 'grey66')) +
scale_edge_width_continuous(range = c(0.2,3)) +
# Theme
theme_graph() +
theme(legend.position = "right") +
# Rename the legends
labs(size = "Enzymes frequency (%)") +
# Set the legends order
guides(size = guide_legend(order = 1),
colour = guide_legend(order = 2))
staticGraph
staticGraph
ggsave(paste0('./output/network/static/', filename, '.png'), width = 35, height = 20, units = "cm")
#---------------------------#
# [EXPORT THE GRAPH FIGURE] #
#---------------------------#
filename <- paste0(org_, pathway_)
filename
file.path(paste0('./output/network/static'))
dir.create(file.path(paste0('../../output/network/static')), showWarnings = FALSE, mode = "0775")
file.path(paste0('../../output/network/static'))
getwd()
setwd(dirBase)
dir.create(file.path(paste0('./output/network/static')), showWarnings = FALSE, mode = "0775")
ggsave(paste0('./output/network/static/', filename, '.png'), width = 35, height = 20, units = "cm")
