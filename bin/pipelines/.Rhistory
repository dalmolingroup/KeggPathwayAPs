# Create tge DB connection
createDbConnection()
# Load the pathways by organisms data
orgList <- c("ec", "hsa", "mmu", "dme", "sce", "cel")
# Load the paythway list
pathwayList <- getAllPathways()
# Reduce the pathway list for testint purpose
pathwayList = pathwayList[1:5]
#*******************************************************************************************#
# ---- PIPELINE SECTION ----
#***************#
# Pipeline flow #
#***************#
# Loop 01: Run through all available organisms
lapply(orgList, function(org_) {
pathway_index <- 1
# Loop 02: Run through all available pathways
lapply(pathwayList, function(pathway_) {
createDbConnection()
# Adjust the pathway code
pathway_ = str_replace(pathway_, 'ec', '')
# Status message
printMessage(paste0("GENERATING ORG ", org_, ", PATHWAY ", pathway_, " INTERATIVE NETWORK [", pathway_index, " OF ", length(pathwayList), "]"))
# Just execute if the network don't exist
if (!dir.exists(file.path(paste0(dirBase, '/output/network/', org_, pathway_)))) {
# Generate the dynamic network
generatedNetwork <- showDynamicGraph(pathway_ = pathway_, org_ = org_,
auxInfo_ = T, label_ = "enzyme",
removeFake_ = T)
exportNetwork(generatedNetwork, pathway_, org_)
}
# Increment the index
pathway_index <<- pathway_index + 1
}) # End of Loop 02
}) # End of Loop 01
# End ----
g<-getGraphFromPath(pathway = 'ec00010', org = 'hsa')
View(g)
g<-getGraphFromPath(pathway = 'ec00010', org = 'hsa')
View(g)
#*******************************************#
# Pipeline to generate the dynamic networks #
#*******************************************#
# ---- IMPORT SECTION ----
# Clean all variables
rm(list=ls(all=TRUE))
# Import the necessary libraries
library(dplyr)
# Graph handling
library(igraph)
library(visNetwork)
# Graph plot
library(ggraph)
# Graph layouts
library(graphlayouts)
library(oaqc)
# Color pallete and scale
library(RColorBrewer)
library(viridis)
library(scales)
# Image export
library(svglite)
# Base location ----
# Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/media/igorbrandao/IGOR BACKUP SERVER/Arquivos Igor/Faculdades/UFRN/4 - Mestrado/Pesquisas/System biology approaches in the investigation of bottlenecks in KEGG pathways/KeggPathwayAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Import the graphLoader functions
files.sources = NULL
files.sources[1] = paste0("../functions", "/", "dynamicGraph.R")
sapply(files.sources, source)
#*******************************************************************************************#
# ---- SETTINGS SECTION ----
#*************************#
# Pipeline basic settings #
#*************************#
# Create tge DB connection
createDbConnection()
# Load the pathways by organisms data
orgList <- c("ec", "hsa", "mmu", "dme", "sce", "cel")
# Load the paythway list
pathwayList <- getAllPathways()
# Reduce the pathway list for testint purpose
pathwayList = pathwayList[1:5]
#*******************************************************************************************#
# ---- PIPELINE SECTION ----
#***************#
# Pipeline flow #
#***************#
# Loop 01: Run through all available organisms
lapply(orgList, function(org_) {
pathway_index <- 1
# Loop 02: Run through all available pathways
lapply(pathwayList, function(pathway_) {
createDbConnection()
# Adjust the pathway code
pathway_ = str_replace(pathway_, 'ec', '')
# Status message
printMessage(paste0("GENERATING ORG ", org_, ", PATHWAY ", pathway_, " INTERATIVE NETWORK [", pathway_index, " OF ", length(pathwayList), "]"))
# Just execute if the network don't exist
if (!dir.exists(file.path(paste0(dirBase, '/output/network/', org_, pathway_)))) {
# Generate the dynamic network
generatedNetwork <- showDynamicGraph(pathway_ = pathway_, org_ = org_,
auxInfo_ = T, label_ = "enzyme",
removeFake_ = T)
exportNetwork(generatedNetwork, pathway_, org_)
}
# Increment the index
pathway_index <<- pathway_index + 1
}) # End of Loop 02
}) # End of Loop 01
g<-getGraphFromPath(pathway = 'ec00010', org = 'hsa')
View(g)
# End ----
g<-getGraphFromPath(pathway = 'ec00010', org = 'hsa')
View(g)
#*******************************************#
# Pipeline to generate the dynamic networks #
#*******************************************#
# ---- IMPORT SECTION ----
# Clean all variables
rm(list=ls(all=TRUE))
# Import the necessary libraries
library(dplyr)
# Graph handling
library(igraph)
library(visNetwork)
# Graph plot
library(ggraph)
# Graph layouts
library(graphlayouts)
library(oaqc)
# Color pallete and scale
library(RColorBrewer)
library(viridis)
library(scales)
# Image export
library(svglite)
# Base location ----
# Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/media/igorbrandao/IGOR BACKUP SERVER/Arquivos Igor/Faculdades/UFRN/4 - Mestrado/Pesquisas/System biology approaches in the investigation of bottlenecks in KEGG pathways/KeggPathwayAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Import the graphLoader functions
files.sources = NULL
files.sources[1] = paste0("../functions", "/", "dynamicGraph.R")
sapply(files.sources, source)
#*******************************************************************************************#
# ---- SETTINGS SECTION ----
#*************************#
# Pipeline basic settings #
#*************************#
# Create tge DB connection
createDbConnection()
# Load the pathways by organisms data
orgList <- c("hsa", "mmu", "dme", "sce", "cel")
# Load the paythway list
pathwayList <- getAllPathways()
# Reduce the pathway list for testint purpose
pathwayList = pathwayList[1:5]
#*******************************************************************************************#
# ---- PIPELINE SECTION ----
#***************#
# Pipeline flow #
#***************#
# Loop 01: Run through all available organisms
lapply(orgList, function(org_) {
pathway_index <- 1
# Loop 02: Run through all available pathways
lapply(pathwayList, function(pathway_) {
createDbConnection()
# Adjust the pathway code
pathway_ = str_replace(pathway_, 'ec', '')
# Status message
printMessage(paste0("GENERATING ORG ", org_, ", PATHWAY ", pathway_, " INTERATIVE NETWORK [", pathway_index, " OF ", length(pathwayList), "]"))
# Just execute if the network don't exist
if (!dir.exists(file.path(paste0(dirBase, '/output/network/', org_, pathway_)))) {
# Generate the dynamic network
generatedNetwork <- showDynamicGraph(pathway_ = pathway_, org_ = org_,
auxInfo_ = T, label_ = "enzyme",
removeFake_ = T)
exportNetwork(generatedNetwork, pathway_, org_)
}
# Increment the index
pathway_index <<- pathway_index + 1
}) # End of Loop 02
}) # End of Loop 01
g<-getGraphFromPath(pathway = 'ec00010', org = 'hsa')
View(g)
# End ----
#*******************************************#
# Pipeline to generate the dynamic networks #
#*******************************************#
# ---- IMPORT SECTION ----
# Clean all variables
rm(list=ls(all=TRUE))
# Import the necessary libraries
library(dplyr)
# Graph handling
library(igraph)
library(visNetwork)
# Graph plot
library(ggraph)
# Graph layouts
library(graphlayouts)
library(oaqc)
# Color pallete and scale
library(RColorBrewer)
library(viridis)
library(scales)
# Image export
library(svglite)
# Base location ----
# Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/media/igorbrandao/IGOR BACKUP SERVER/Arquivos Igor/Faculdades/UFRN/4 - Mestrado/Pesquisas/System biology approaches in the investigation of bottlenecks in KEGG pathways/KeggPathwayAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Import the graphLoader functions
files.sources = NULL
files.sources[1] = paste0("../functions", "/", "dynamicGraph.R")
sapply(files.sources, source)
#*******************************************************************************************#
# ---- SETTINGS SECTION ----
#*************************#
# Pipeline basic settings #
#*************************#
# Create tge DB connection
createDbConnection()
# Load the pathways by organisms data
orgList <- c("hsa", "mmu", "dme", "sce", "cel")
# Load the paythway list
pathwayList <- getAllPathways()
# Reduce the pathway list for testint purpose
pathwayList = pathwayList[1:5]
#*******************************************************************************************#
# ---- PIPELINE SECTION ----
#***************#
# Pipeline flow #
#***************#
# Loop 01: Run through all available organisms
lapply(orgList, function(org_) {
pathway_index <- 1
# Loop 02: Run through all available pathways
lapply(pathwayList, function(pathway_) {
createDbConnection()
# Adjust the pathway code
pathway_ = str_replace(pathway_, 'ec', '')
# Status message
printMessage(paste0("GENERATING ORG ", org_, ", PATHWAY ", pathway_, " INTERATIVE NETWORK [", pathway_index, " OF ", length(pathwayList), "]"))
# Just execute if the network don't exist
if (!dir.exists(file.path(paste0(dirBase, '/output/network/', org_, pathway_)))) {
# Generate the dynamic network
generatedNetwork <- showDynamicGraph(pathway_ = pathway_, org_ = org_,
auxInfo_ = T, label_ = "enzyme",
removeFake_ = T)
exportNetwork(generatedNetwork, pathway_, org_)
}
# Increment the index
pathway_index <<- pathway_index + 1
}) # End of Loop 02
}) # End of Loop 01
# End ----
#*******************************************#
# Pipeline to generate the dynamic networks #
#*******************************************#
# ---- IMPORT SECTION ----
# Clean all variables
rm(list=ls(all=TRUE))
# Import the necessary libraries
library(dplyr)
# Graph handling
library(igraph)
library(visNetwork)
# Graph plot
library(ggraph)
# Graph layouts
library(graphlayouts)
library(oaqc)
# Color pallete and scale
library(RColorBrewer)
library(viridis)
library(scales)
# Image export
library(svglite)
# Base location ----
# Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/media/igorbrandao/IGOR BACKUP SERVER/Arquivos Igor/Faculdades/UFRN/4 - Mestrado/Pesquisas/System biology approaches in the investigation of bottlenecks in KEGG pathways/KeggPathwayAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Import the graphLoader functions
files.sources = NULL
files.sources[1] = paste0("../functions", "/", "dynamicGraph.R")
sapply(files.sources, source)
#*******************************************************************************************#
# ---- SETTINGS SECTION ----
#*************************#
# Pipeline basic settings #
#*************************#
# Create tge DB connection
createDbConnection()
# Load the pathways by organisms data
orgList <- c("hsa", "mmu", "dme", "sce", "cel")
# Load the paythway list
pathwayList <- getAllPathways()
# Reduce the pathway list for testint purpose
pathwayList = pathwayList[1:5]
#*******************************************************************************************#
# ---- PIPELINE SECTION ----
#***************#
# Pipeline flow #
#***************#
# Loop 01: Run through all available organisms
lapply(orgList, function(org_) {
pathway_index <- 1
# Loop 02: Run through all available pathways
lapply(pathwayList, function(pathway_) {
createDbConnection()
# Adjust the pathway code
pathway_ = str_replace(pathway_, 'ec', '')
# Status message
printMessage(paste0("GENERATING ORG ", org_, ", PATHWAY ", pathway_, " INTERATIVE NETWORK [", pathway_index, " OF ", length(pathwayList), "]"))
# Just execute if the network don't exist
if (!dir.exists(file.path(paste0(dirBase, '/output/network/', org_, pathway_)))) {
# Generate the dynamic network
generatedNetwork <- showDynamicGraph(pathway_ = pathway_, org_ = org_,
auxInfo_ = T, label_ = "enzyme",
removeFake_ = T)
exportNetwork(generatedNetwork, pathway_, org_)
}
# Increment the index
pathway_index <<- pathway_index + 1
}) # End of Loop 02
}) # End of Loop 01
# End ----
pathway_ = "00010"
org_ = "hsa"
auxInfo_ = T
label_ = 'enzyme'
removeFake_ = T
dynamicNetwork_ = T
if (!label_ %in% c('enzyme','reaction','id')) {
stop('Label must be "enzyme", "reaction" or "id".')
}
# Color pallet
pal <- brewer.pal(9, "YlOrRd")
pal2 <- brewer.pal(8, "Dark2")
# Retrieve the pathway ID (check here, just work with ec)
pId = getPathId(paste0(org_, pathway_))
pId
paste0(org_, pathway_)
# Retrieve the pathway ID (check here, just work with ec)
pId = getPathId(paste0("ec", pathway_))
pId
# Retrieve the graph (check here, just work with ec)
if (org_ == "ec") {
lGraph <- getGraphFromPath(pathway = paste0("ec", pathway_))
} else {
lGraph <- getGraphFromPath(pathway = paste0("ec", pathway_), org = org_)
}
print(pId)
View(lGraph)
g1<-lGraph[[1]]
g4 <-lGraph[[2]]
View(g4)
V(g4)$nId
# Retrieve the network metrics
networkProperties <- getNodeMetrics(V(g4)$nId, pId)
networkProperties
# Get the iGraph object
iGraph <- g4
# Convert the iGraph object toVisNetworkData
data <- toVisNetworkData(iGraph)
View(data)
if (label_ == 'enzyme') {
edge_attr(g1,'label')<-edge_attr(g1,"eName")
vertex_attr(g4,'name')<-vertex_attr(g4,"eName")
} else if(label_ == 'reaction') {
edge_attr(g1,'label')<-edge_attr(g1,"rName")
vertex_attr(g4,'name')<-vertex_attr(g4,"rName")
}
#*******************************************#
# Pipeline to generate the dynamic networks #
#*******************************************#
# ---- IMPORT SECTION ----
# Clean all variables
rm(list=ls(all=TRUE))
# Import the necessary libraries
library(dplyr)
# Graph handling
library(igraph)
library(visNetwork)
# Graph plot
library(ggraph)
# Graph layouts
library(graphlayouts)
library(oaqc)
# Color pallete and scale
library(RColorBrewer)
library(viridis)
library(scales)
# Image export
library(svglite)
# Base location ----
# Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/media/igorbrandao/IGOR BACKUP SERVER/Arquivos Igor/Faculdades/UFRN/4 - Mestrado/Pesquisas/System biology approaches in the investigation of bottlenecks in KEGG pathways/KeggPathwayAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Import the graphLoader functions
files.sources = NULL
files.sources[1] = paste0("../functions", "/", "dynamicGraph.R")
sapply(files.sources, source)
#*******************************************************************************************#
# ---- SETTINGS SECTION ----
#*************************#
# Pipeline basic settings #
#*************************#
# Create tge DB connection
createDbConnection()
# Load the pathways by organisms data
orgList <- c("hsa", "mmu", "dme", "sce", "cel")
# Load the paythway list
pathwayList <- getAllPathways()
# Reduce the pathway list for testint purpose
pathwayList = pathwayList[1:5]
#*******************************************************************************************#
# ---- PIPELINE SECTION ----
#***************#
# Pipeline flow #
#***************#
# Loop 01: Run through all available organisms
lapply(orgList, function(org_) {
pathway_index <- 1
# Loop 02: Run through all available pathways
lapply(pathwayList, function(pathway_) {
createDbConnection()
# Adjust the pathway code
pathway_ = str_replace(pathway_, 'ec', '')
# Status message
printMessage(paste0("GENERATING ORG ", org_, ", PATHWAY ", pathway_, " INTERATIVE NETWORK [", pathway_index, " OF ", length(pathwayList), "]"))
# Just execute if the network don't exist
if (!dir.exists(file.path(paste0(dirBase, '/output/network/', org_, pathway_)))) {
# Generate the dynamic network
generatedNetwork <- showDynamicGraph(pathway_ = pathway_, org_ = org_,
auxInfo_ = T, label_ = "enzyme",
removeFake_ = T)
exportNetwork(generatedNetwork, pathway_, org_)
}
# Increment the index
pathway_index <<- pathway_index + 1
}) # End of Loop 02
}) # End of Loop 01
# End ----
