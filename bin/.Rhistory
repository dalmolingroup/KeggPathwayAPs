return(NULL)
})
error != 0
if(error != 0){
return(0)
}
relationRef <- do.call(rbind, dataList)
rm(dataList)
tryCatch(dataList <- lapply(isReaction, parseReaction),
error = function(e) {
cat("\tError processing", basename(kgml_), "file.\n")
cat(file = logFile, append = T,
"\tError processing", basename(kgml_), "file.\n")
error<<-0
error<<-1
return(NULL)
})
error != 0
if(error != 0){
return(0)
}
# reactions <- do.call(rbind, dataList)
reactionsRef <- do.call(rbind, lapply(dataList, `[[`, 1))
reactionsDef <- do.call(rbind, lapply(dataList, `[[`, 2))
rDupReaction <- do.call(rbind, lapply(dataList, `[[`, 3))
rDupReaction<-na.exclude(rDupReaction)
rm(dataList)
#separate enzimes from maps and compounds
enzimes<-entryRef[entryRef$eType == 'enzyme',]
compounds<-entryRef[entryRef$eType == 'compound',]
compounds$cDesc<-''
# To maintain always the lower name
enzimes<-enzimes[order(enzimes$eName),]
#colapse alternative enzimes for the same reaction
nodes<-enzimes[!duplicated(enzimes[,c("eReaction")]),]
nodesDuplic<-enzimes[duplicated(enzimes[,c("eReaction")]),]
nodesDuplic<- merge(nodesDuplic, nodes[,c("eId","eName",
"eReaction",
"x","y")],
by="eReaction")
#nodes<-current_kgml$nodes
map <- pathwayinfo$number
i=2 #debug
#something is wrong with data?
if(isTRUE(is.null(nrow(compounds))) |
isTRUE(nrow(compounds) == 0) |
isTRUE(is.null(nrow(reactionsRef))) |
isTRUE(nrow(reactionsRef) == 0)|
isTRUE(is.null(nrow(enzimes))) |
isTRUE(nrow(enzimes) == 0) |
isTRUE(is.null(nrow(relationRef))) |
isTRUE(nrow(relationRef) == 0)){
cat("\tError processing", basename(kgml_), "file.\n")
cat(file = logFile, append = T,
"\tError processing", basename(kgml_), "file.\n")
return(0)
}
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<-file.path(dirBase,"figures")
#bin dir
binDir<-file.path(dirBase,"bin")
#function dir
funcDir<-file.path(binDir,"functions")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
processed <<- 0
processed <<- processed + 1
cat("Processing",
file,
'[',processed,'/',
available_pathways,']\n')
# Define the number of available pathways
available_pathways <- length(kgml_list)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<-file.path(dirBase,"figures")
#bin dir
binDir<-file.path(dirBase,"bin")
#function dir
funcDir<-file.path(binDir,"functions")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(skip = T)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = T)
createNodesFromEC(dirBase = dirBase, skip = T)
showGraph(pathway = "ec:00365", plot = T)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(skip = T)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = T)
createNodesFromEC(dirBase = dirBase, skip = T)
showGraph(pathway = "ec:00365", plot = T)
showGraph(pathway = "ec00365", plot = T)
showGraph(pathway = "ec00190", plot = T)
showGraph(pathway = "ec00190", plot = T)
showGraph(pathway = "ec00253", plot = T)
showGraph(pathway = "ec00604", plot = T)
showGraph(pathway = "ec00300", plot = T)
ecs<-c('ec:5.1.3.3','ec:2.7.1.2','ec:2.7.1.147',
'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
'ec:2.7.1.63','ec::2.7.1.1','ec:3.1.3.10',
'ec:3.1.3.9','ec:5.4.2.2')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
ecs<-c('ec:5.1.3.3','ec:2.7.1.147',
'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
'ec:2.7.1.63','ec::2.7.1.1','ec:3.1.3.10',
'ec:3.1.3.9','ec:5.4.2.2')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
ecs<-c('ec:5.1.3.3','ec:2.7.1.147',
'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
'ec::2.7.1.1','ec:3.1.3.10',
'ec:3.1.3.9','ec:5.4.2.2')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(skip = T)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = T)
ecs<-c('ec:5.1.3.3','ec:2.7.1.147','ec::2.7.1.2',
'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
'ec::2.7.1.1','ec:3.1.3.10',
'ec:3.1.3.9','ec:5.4.2.2')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#conect and test dictionary
dbCon <<- dbConnect(RSQLite::SQLite(), dbFile)
if(is.na(ecs)){
sql<-paste0('select eName
from enzOnPath as ep inner join
path as p on p.pId = ep.pId inner Join
enzime as e on e.eId = ep.eId
where pName = "',pathway,'"')
ecs<- dbGetQuery(dbCon,sql)
ecs <- as.vector(ecs[,1])
}
edges <- getEdgesFromEcs(ecs = ecs, pathway = pathway )
g1 <- graph_from_data_frame(edges,
directed=TRUE,
vertices=NULL)
edgeNames<-E(g1)$eName
edge_attr(g1)
#print(g1, e=TRUE, v=TRUE)
edge_attr(g1) <- list(color = rep("green", gsize(g1)),
curved = rep(F, gsize(g1)))
showGraph<-function(ecs = NA,
pathway,
adj = T,
plot = T){
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#conect and test dictionary
dbCon <<- dbConnect(RSQLite::SQLite(), dbFile)
#pathway <- "ec00010"
if(is.na(ecs)){
sql<-paste0('select eName
from enzOnPath as ep inner join
path as p on p.pId = ep.pId inner Join
enzime as e on e.eId = ep.eId
where pName = "',pathway,'"')
ecs<- dbGetQuery(dbCon,sql)
ecs <- as.vector(ecs[,1])
}
# ecs<-c('ec:5.1.3.3','ec:2.7.1.2','ec:2.7.1.147',
#        'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
#        'ec:2.7.1.63','ec::2.7.1.1','ec:3.1.3.10',
#        'ec:3.1.3.9','ec:5.4.2.2')
#
# ecs<-c('ec:2.3.1.12','ec:1.2.4.1','ec:1.8.1.4',
#        'ec:1.2.7.1','ec:1.2.7.11','ec:2.7.1.40',
#        'ec:4.1.1.1','ec:4.2.1.11')
#
edges <- getEdgesFromEcs(ecs = ecs, pathway = pathway )
g1 <- graph_from_data_frame(edges,
directed=TRUE,
vertices=NULL)
edgeNames<-E(g1)$eName
edge_attr(g1)
#print(g1, e=TRUE, v=TRUE)
edge_attr(g1) <- list(color = rep("green", gsize(g1)),
curved = rep(F, gsize(g1)))
edge_attr(g1, "label") <- edgeNames
#tkplot(g1)
g2 <- make_line_graph(g1)
vertex_attr(g2, "label")<- edgeNames
vNames<- V(g2)$label
vNames<- data.frame(nr = seq(1,length(vNames),1),
label = vNames,
stringsAsFactors = F)
#remove duplicity
g3<-as_data_frame(g2,what = "edges")
nrow(g3[g3$from == g3$to,])
sum(duplicated(vNames$label))
g3<- merge(g3, vNames,
by.x="from",
by.y="nr")
colnames(g3) <- c("fromO","toO","from")
g3<- merge(g3, vNames,
by.x="toO",
by.y="nr")
g3$toO<-NULL
g3$fromO<-NULL
colnames(g3) <- c("from","to")
g3<-g3[g3$from != g3$to,]
g4<-graph_from_data_frame(g3, directed = T)
tkplot(g1)
tkplot(g4)
return(g4)
#plot(edges)
dbDisconnect(dbCon)
}
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
ecs<-c('ec:5.1.3.3','ec:2.7.1.147','ec::2.7.1.2',
'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
'ec::2.7.1.1','ec:3.1.3.10',
'ec:3.1.3.9','ec:5.4.2.2',
'ec:2.3.1.12','ec:1.2.4.1','ec:1.8.1.4','ec:6.2.1.1','ec:6.2.1.13')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
source('~/Dropbox/projetos/Igor/gitAPs/bin/00main.R', echo=TRUE)
ecs<-c('ec:2.3.1.12','ec:1.2.4.1','ec:1.8.1.4','ec:6.2.1.1','ec:6.2.1.13')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
ecs<-c('ec:2.3.1.12','ec:1.2.4.1','ec:1.8.1.4','ec:6.2.1.1','ec:6.2.1.13')
showGraph(pathway = "ec00010", ecs = ecs, plot = T)
