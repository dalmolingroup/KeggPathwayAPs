nextId,',',
pId,');')
resQuery <- dbExecute(dbCon,sql)
}
return(list(nextId, eName))
}
# Inexists
#take the next ID from database
nextId<-getNextId(table)
#new enzimeID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
rName,'","',
rType,'");')
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO reacOnPath
VALUES (',
nextId,',',
pId,');')
#new pathway
e<-tryCatch(resQuery <- dbExecute(dbCon,sql),
error = function(e) {
erro<-grep(pattern = "UNIQUE constraint failed",
x= e$message )
if(length(erro)>0){
warning(paste("Enzime",eName, "already exixts."))
}else{
warning(paste("Could not process",eName, "information."))
}
return(0)
})
if(e == 0){
return(list(NA,eName))
}else{
return(list(nextId,eName ))
}
data.frame(newId=NA, oldId= nextId,
rName = rname, rType = rType,
stringsAsFactors = F)
data.frame(newId=NA, oldId= nextId,
rName = rName, rType = rType,
stringsAsFactors = F)
data.frame(newId=nextId, oldId= nextId,
rName = rName, rType = rType,
stringsAsFactors = F)
rId <- apply(X = reactionsRef,
MARGIN = 1,
insertReaction)
insertReaction<-function(reaction){
table <- "reaction"
field <- "rName"
rName <- reaction["rName"]
rType <- reaction["rType"]
rType <- ifelse(rType == 'reversible', 1,0)
oldId<-reaction["rId"]
#reaction exists?
nextId <- searchValue(table, field, rName)
if(nextId !=0 ){ # Exists
# reaction exists on pathway
exist<-searchValue("enzOnPath","eId",nextId, pId)
if( exist == 0){
sql <- paste0('INSERT INTO reacOnPath
VALUES (',
nextId,',',
pId,');')
resQuery <- dbExecute(dbCon,sql)
}
return(data.frame(newId=paste0('r',nextId)
,oldId= oldId,
rName = rName,
rType = rType,
stringsAsFactors = F))
}
# Inexists
#take the next ID from database
nextId<-getNextId(table)
#new enzimeID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
rName,'","',
rType,'");')
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO reacOnPath
VALUES (',
nextId,',',
pId,');')
#new pathway
e<-tryCatch(resQuery <- dbExecute(dbCon,sql),
error = function(e) {
erro<-grep(pattern = "UNIQUE constraint failed",
x= e$message )
if(length(erro)>0){
warning(paste("Enzime",eName, "already exixts."))
}else{
warning(paste("Could not process",eName, "information."))
}
return(0)
})
if(e == 0){
return(data.frame(newId=NA,
oldId= oldId,
rName = rName,
rType = rType,
stringsAsFactors = F))
}else{
return(data.frame(newId=paste0('r',nextId)
,oldId= oldId,
rName = rName,
rType = rType,
stringsAsFactors = F))
}
#reversible must be 0 or 1
if(!rReversible %in% c(0,1)){
warning(paste("Reaction must be 0 for irreversible or 1 to reversible.
Not processing", rName))
return(0)
}
table <- "reaction"
nextId<-getNextId(table)
#new pathway
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
rName,'","',
rReversible,'");')
e<-tryCatch(resQuery <- dbExecute(dbCon,sql),
error = function(e) {
erro<-grep(pattern = "UNIQUE constraint failed",
x= e$message )
if(length(erro)>0){
warning(paste("Reaction",rName, "already exixts."))
}else{
warning(paste("Could not process",rName, "information."))
}
return()
})
return(nextId)
}
rId <- apply(X = reactionsRef,
MARGIN = 1,
insertReaction)
rId <- do.call(rbind,
apply(X = reactionsRef,
MARGIN = 1,
insertReaction))
View(rId)
reactionsRef <- do.call(rbind,
apply(X = reactionsRef,
MARGIN = 1,
insertReaction))
View(reactionsRef)
View(reactionsDef)
#Insert pathway information into database
pId <- insertPathInfo(pathwayinfo)
pId<-do.call(rbind, pId)[1]
enzimes$pId<-pId
View(compounds)
View(reactionsDef)
#Insert pathway information into database
pId <- insertPathInfo(pathwayinfo)
pId<-do.call(rbind, pId)[1]
#Insert pathway information into database
pId <- do.call(rbind, insertPathInfo(pathwayinfo))[1]
enzimes$pId<-pId
compounds$pId<-pId
reactionsRef$pId<-pId
reactionsDef$pId<-pId
# Retrieve the XML root
root <- xml_root(doc)
# Define which children are entries
isEntry<-xml_find_all(root,"//entry")
# Define which children are relations
isRelation<-xml_find_all(root,"//relation")
# Define which children are reactions
isReaction<-xml_find_all(root,"//reaction")
# Retrieve the pathway info as dataFrame
pathwayinfo <- parsePathwayInfo(root)
map <- sub(x = pathwayinfo$name, pattern = "path:",replacement = '')
entry<-xml_find_first(root,"//entry[@name='ec:2.7.1.1']") #debug
#entry<-isEntry[[1]] #debug
# Retrieve the pathway entries as dataFrame
dataList <- lapply(isEntry, parseEntry)
#rearange in dataframes
entryRef <- do.call(rbind, lapply(dataList, `[[`, 1))
entryMap <- do.call(rbind, lapply(dataList, `[[`, 2))
dupEntry <- do.call(rbind, lapply(dataList, `[[`, 3))
dupEntry<-na.exclude(dupEntry)
eDupReaction <- do.call(rbind, lapply(dataList, `[[`, 4))
eDupReaction<-na.exclude(eDupReaction)
rm(dataList)
relation<-xml_find_first(root,"//relation") #debug
# Retrieve the pathway edges as dataFrame
dataList <- lapply(isRelation, parseRelation)
relationRef <- do.call(rbind, dataList)
rm(dataList)
# Retrieve the pathway reactions as dataFrame
dataList <- lapply(isReaction, parseReaction)
# reactions <- do.call(rbind, dataList)
reactionsRef <- do.call(rbind, lapply(dataList, `[[`, 1))
reactionsDef <- do.call(rbind, lapply(dataList, `[[`, 2))
rDupReaction <- do.call(rbind, lapply(dataList, `[[`, 3))
rDupReaction<-na.exclude(rDupReaction)
rm(dataList)
#separate enzimes from maps and compounds
enzimes<-entryRef[entryRef$eType == 'enzyme',]
compounds<-entryRef[entryRef$eType == 'compound',]
compounds$cDesc<-''
# To maintain always the lower name
enzimes<-enzimes[order(enzimes$eName),]
#colapse alternative enzimes for the same reaction
nodes<-enzimes[!duplicated(enzimes[,c("eReaction")]),]
nodesDuplic<-enzimes[duplicated(enzimes[,c("eReaction")]),]
nodesDuplic<- merge(nodesDuplic, nodes[,c("eId","eName",
"eReaction",
"x","y")],
by="eReaction")
#nodes<-current_kgml$nodes
map <- pathwayinfo$number
i=2 #debug
#Insert pathway information into database
pId <- do.call(rbind, insertPathInfo(pathwayinfo))[1]
enzimes$pId<-pId
compounds$pId<-pId
reactionsRef$pId<-pId
reactionsDef$pId<-pId
compound<-as.vector(compounds[1,]) #debug
table <- "compound"
field <- "cName"
cName <- compound["eName"]
cDesc <- compound["Desc"]
compound
cDesc <- compound["cDesc"]
pId <- enzime["pId"]
cName <- compound["eName"]
cDesc <- compound["cDesc"]
pId <- compound["pId"]
x <- compound["x"]
y <- compound["y"]
oldId<-compound["eId"]
#enzime exists?
nextId <- searchValue(table, field, eName)
#compound exists?
nextId <- searchValue(table, field, cName)
# enzime in pathway exists
exist<-searchValue("compOnPath","eId",nextId, pId)
# enzime in pathway exists
exist<-searchValue("compOnPath","cId",nextId, pId)
exist == 0
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
resQuery <- dbExecute(dbCon,sql)
nextId !=0
# Inexists
#take the next ID from database
nextId<-getNextId(table)
#new enzimeID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
cName,'","',
cDesc,'");')
resQuery <- dbExecute(dbCon,sql)
#new enzimeID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
cName,'","',
cDesc,'");')
resQuery <- dbExecute(dbCon,sql)
#new enzimeID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
cName,'","',
cDesc,'");')
resQuery <- dbExecute(dbCon,sql)
dbDisconnect(dbCon)
dbCon <- dbConnect(RSQLite::SQLite(), dbFile)
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO enzOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
#compound exists?
nextId <- searchValue(table, field, cName)
e<-tryCatch(resQuery <- dbExecute(dbCon,sql),
error = function(e) {
erro<-grep(pattern = "UNIQUE constraint failed",
x= e$message )
if(length(erro)>0){
warning(paste("Compound",cName, "already exixts."))
}else{
warning(paste("Could not process",cName, "information."))
}
return(0)
})
#Insert pathway information into database
pId <- do.call(rbind, insertPathInfo(pathwayinfo))[1]
enzimes$pId<-pId
compounds$pId<-pId
reactionsRef$pId<-pId
reactionsDef$pId<-pId
cId <- apply(X = compounds,
MARGIN = 1,
insertCompound)
View(cId)
cId <- do.call(rbind,
apply(X = compounds,
MARGIN = 1,
insertCompound))
View(cId)
(data.frame(newId=paste0('c',nextId)
,oldId= oldId,
cName = cName,
cType = cType,
stringsAsFactors = F))
data.frame(newId=paste0('c',nextId),
oldId= oldId,
cName = cName,
cDesc =cDesc,
x = x,
y = y,
stringsAsFactors = F))
(data.frame(newId=paste0('c',nextId),
oldId= oldId,
cName = cName,
cDesc =cDesc,
x = x,
y = y,
stringsAsFactors = F))
insertCompound<-function(compound){
table <- "compound"
field <- "cName"
cName <- compound["eName"]
cDesc <- compound["cDesc"]
pId <- compound["pId"]
x <- compound["x"]
y <- compound["y"]
oldId<-compound["eId"]
#compound exists?
nextId <- searchValue(table, field, cName)
if(nextId !=0 ){ # Exists
# enzime in pathway exists
exist<-searchValue("compOnPath","cId",nextId, pId)
if( exist == 0){
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
resQuery <- dbExecute(dbCon,sql)
}
return(list(nextId, cName))
}
# Inexists
#take the next ID from database
nextId<-getNextId(table)
#new compoundID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
cName,'","',
cDesc,'");')
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
e<-tryCatch(resQuery <- dbExecute(dbCon,sql),
error = function(e) {
erro<-grep(pattern = "UNIQUE constraint failed",
x= e$message )
if(length(erro)>0){
warning(paste("Compound",cName, "already exixts."))
}else{
warning(paste("Could not process",cName, "information."))
}
return(0)
})
if(e == 0){
return(list(NA,cName))
}else{
return(data.frame(newId=paste0('c',nextId),
oldId= oldId,
cName = cName,
cDesc =cDesc,
x = x,
y = y,
stringsAsFactors = F))
}
}
cId <- do.call(rbind,
apply(X = compounds,
MARGIN = 1,
insertCompound))
View(cId)
cId[[1]]
insertCompound<-function(compound){
table <- "compound"
field <- "cName"
cName <- compound["eName"]
cDesc <- compound["cDesc"]
pId <- compound["pId"]
x <- compound["x"]
y <- compound["y"]
oldId<-compound["eId"]
#compound exists?
nextId <- searchValue(table, field, cName)
if(nextId !=0 ){ # Exists
# enzime in pathway exists
exist<-searchValue("compOnPath","cId",nextId, pId)
if( exist == 0){
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
resQuery <- dbExecute(dbCon,sql)
}
return(data.frame(newId=paste0('c',nextId),
oldId= oldId,
cName = cName,
cDesc =cDesc,
x = x,
y = y,
stringsAsFactors = F))
}
# Inexists
#take the next ID from database
nextId<-getNextId(table)
#new compoundID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
cName,'","',
cDesc,'");')
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO compOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
e<-tryCatch(resQuery <- dbExecute(dbCon,sql),
error = function(e) {
erro<-grep(pattern = "UNIQUE constraint failed",
x= e$message )
if(length(erro)>0){
warning(paste("Compound",cName, "already exixts."))
}else{
warning(paste("Could not process",cName, "information."))
}
return(0)
})
if(e == 0){
return(data.frame(NA,
oldId= oldId,
cName = cName,
cDesc =cDesc,
x = x,
y = y,
stringsAsFactors = F))
}else{
return(data.frame(newId=paste0('c',nextId),
oldId= oldId,
cName = cName,
cDesc =cDesc,
x = x,
y = y,
stringsAsFactors = F))
}
}
cId <- do.call(rbind,
apply(X = compounds,
MARGIN = 1,
insertCompound))
View(cId)
View(compound)
View(compounds)
