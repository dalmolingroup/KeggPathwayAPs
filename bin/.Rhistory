skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
#create a new empty database
# WARNING: all data will be lost
createDB(dbTemplate = dbTemplate,
dbFile = dbFile,
skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
source(file.path(funcDir,"phaseFunctions.R"))
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(dbTemplate = dbTemplate,
dbFile = dbFile,
skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
parallel = T,
skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
createGraphMetrics(skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
prepareNodeByOrgs <- function(){
#prepare the table reactionAssociation to receive data
sql <- "DELETE FROM nodebyorgs"
resQuery <- dbExecute(dbCon,sql)
}
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
createGraphMetrics(skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"dbFunctions.R"))
createNodesFromEC(dirBase = dirBase, skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
source(file.path(funcDir,"dbFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
createNodesFromEC(dirBase = dirBase, skip = F)
reactList2
createDbConnection()
sql <- paste0("select *
from reactionAssociation
where rId = ", 1," and
mainRId != 0;")
resQuery <- dbGetQuery(dbCon,sql)
View(resQuery)
resQuery[[1]][[2]]
resQuery[1,2]
resQuery[1,1] != resQuery[1,2]
source(file.path(funcDir,"dbFunctions.R"))
createNodesFromEC(dirBase = dirBase, skip = F)
createGraphMetrics(skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
#dataType = "orgs" #debug
if(skip){
cat("Skiping", dataType,  "pathways processing... \n\n")
return(0)
}
dataType = "orgs" #debug
#dataType = "orgs" #debug
if(skip){
cat("Skiping", dataType,  "pathways processing... \n\n")
return(0)
}
workDir<-file.path(dirBase,"data","kgml")
filterDir<-file.path(dirBase,"data","filtredKgml",dataType)
if(!dir.exists(filterDir)){
dir.create(filterDir, recursive = T)
}
dbDir<-file.path(dirBase,"data","database")
dbTemplate<-file.path(dbDir,"APs.sql")
dbFile<-file.path(dbDir,"dictionary.db")
if(!dir.exists(dbDir)){
dir.create(dbDir)
}
#conect and test dictionary
dbCon <<- dbConnect(RSQLite::SQLite(), dbFile)
#check if is an empty db. If it is, copy from template
if(length(dbListTables(dbCon)) == 0){
dbDisconnect(dbCon)
if(file.exists(dbTemplate)){
# file.copy(dbTemplate, dbFile, overwrite = T)
createDB(dbTemplate, dbFile)
}else{
stop("Database template is missing. Please download it from github...")
}
dbCon <<- dbConnect(RSQLite::SQLite(), dbFile)
}
#clean nodebyorgs table
prepareNodeByOrgs()
logFile <<- file.path(dirBase,"log","phase5.log")
cat("Starting organism pathways processing... \n\n")
cat(file = logFile, append = F,
"\n\n ***************************************************\n",
"Starting organism pathways processing...\n",
date(),"\n",
"***************************************************\n\n")
ecErrors <- file.path(dirBase,
'data',
'database',
'ecErrors.RData')
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(dbTemplate = dbTemplate,
dbFile = dbFile,
skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
createGraphMetrics(skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(dbTemplate = dbTemplate,
dbFile = dbFile,
skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
createGraphMetrics(skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# Import functions files
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
source(file.path(funcDir,"graphFunctions.R"))
source(file.path(funcDir,"kgmlFunctions.R"))
source(file.path(funcDir,"helperFunctions.R"))
source(file.path(funcDir,"phaseFunctions.R"))
source(file.path(funcDir,"dbFunctions.R"))
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
# read xml files from organisms and associate load data with ec networks
generateDataFromKGML(dirBase = dirBase,
dataType = 'orgs',
skip = F)
