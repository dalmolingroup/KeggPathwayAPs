#enzime<-enzimes[28,] #debug
insertEnzime<-function(enzime){
table <- "enzime"
fields <- "eName"
oldId<-enzime["eId"]
eName <- enzime["eName"]
rId <- enzime["rId"]
x <- enzime["x"]
y <- enzime["y"]
pId <- enzime["pId"]
eLabel<-''
values<-paste0('"',eName,'"')
#enzime exists?
nextId <- searchValue(table, fields, values)
if(nextId !=0 ){ # Exists
# enzime exists in pathway?
fields<-c("eId","pId")
values<-c(paste0('"',nextId,'"'),
paste0('"',pId,'"'))
exist<-searchValue("enzOnPath",fields, values)
if( exist == 0){
sql <- paste0('INSERT INTO enzOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
resQuery <- dbExecute(dbCon,sql)
}
# enzime and reaction exists in pathway?
fields<-c("eId","rId")
values<-c(paste0('"',nextId,'"'),
paste0('"',rId,'"'))
exist<-searchValue("enzReac",fields, values)
if( exist == 0){
sql<- paste0('INSERT INTO enzReac
VALUES (',
nextId,',',
rId,');')
resQuery <- dbExecute(dbCon,sql)
}
return(data.frame(newId=paste0('e',nextId)
,oldId= oldId,
eName = eName,
x = x,
y = y,
pId = pId,
eLabel = eLabel,
rId = paste0('r',rId),
stringsAsFactors = F))
}
# Inexists
#take the next ID from database
nextId<-getNextId(table)
#new enzimeID
sql<- paste0('INSERT INTO ',
table,
' VALUES (',
nextId,',"',
eName,'","',
eLabel,'");')
resQuery <- dbExecute(dbCon,sql)
sql <- paste0('INSERT INTO enzOnPath
VALUES (',
nextId,',',
pId,',',
x,',',
y,');')
resQuery <- dbExecute(dbCon,sql)
sql<- paste0('INSERT INTO enzReac
VALUES (',
nextId,',',
rId,');')
resQuery <- dbExecute(dbCon,sql)
return(data.frame(newId=paste0('e',nextId)
,oldId= oldId,
eName = eName,
x = x,
y = y,
pId = pId,
eLabel = eLabel,
rId = paste0('r',rId),
stringsAsFactors = F))
}
enzime<-enzimes[28,]
View(enzime)
table <- "enzime"
fields <- "eName"
oldId<-enzime["eId"]
eName <- enzime["eName"]
rId <- enzime["rId"]
x <- enzime["x"]
y <- enzime["y"]
pId <- enzime["pId"]
eLabel<-''
values<-paste0('"',eName,'"')
#enzime exists?
nextId <- searchValue(table, fields, values)
eName
#enzime exists?
nextId <- searchValue(table, fields, values)
nextId !=0
# enzime exists in pathway?
fields<-c("eId","pId")
values<-c(paste0('"',nextId,'"'),
paste0('"',pId,'"'))
exist<-searchValue("enzOnPath",fields, values)
exist == 0
# enzime and reaction exists in pathway?
fields<-c("eId","rId")
values<-c(paste0('"',nextId,'"'),
paste0('"',rId,'"'))
exist<-searchValue("enzReac",fields, values)
exist == 0
sql<- paste0('INSERT INTO enzReac
VALUES (',
nextId,',',
rId,');')
resQuery <- dbExecute(dbCon,sql)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(skip = F)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = F)
createNodesFromEC(dirBase = dirBase, skip = F)
showGraph(pathway = "ec00010", removeFake = T)
showGraph(pathway = "ec00010", removeFake = T)
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#conect and test dictionary
dbCon <<- dbConnect(RSQLite::SQLite(), dbFile)
pathway <- "ec00010"
ecs = NA
if(is.na(ecs)){
edges<-getEdgesFromPath(pathway = pathway)
}else{
# ecs<-c('ec:5.1.3.3','ec:2.7.1.2','ec:2.7.1.147',
#        'ec:5.1.3.15','ec:5.3.1.9','ec:2.7.1.199',
#        'ec:2.7.1.63','ec::2.7.1.1','ec:3.1.3.10',
#        'ec:3.1.3.9','ec:5.4.2.2')
#
# ecs<-c('ec:2.3.1.12','ec:1.2.4.1','ec:1.8.1.4',
#        'ec:1.2.7.1','ec:1.2.7.11','ec:2.7.1.40',
#        'ec:4.1.1.1','ec:4.2.1.11')
#
edges <- getEdgesFromEcs(ecs = ecs, pathway = pathway )
}
edges<-getEdgesFromPath(pathway = pathway)
View(edges)
pathway<- paste0('"',pathway,'"')
# ecs<- paste0('"',ecs,'"')
# ecs <- do.call(paste, c(as.list(ecs), sep = ","))
sql <- paste0(
'SELECT c1.cName as "from", c2.cName as "to", e.nName as "eName", e.type
FROM edges as e INNER JOIN
reaction as r on r.rId = e.nId INNER JOIN
wAllNodes as c1 on c1.cId = e.subs INNER JOIN
wAllNodes as c2 on c2.cId = e.prod
WHERE nId in (
SELECT mainRId
FROM reactionAssociation
where rId in (
SELECT r.rId  from reaction as r inner JOIN
reacOnPath as ep on ep.rId = r.rId INNER JOIN
path as p on p.pId = ep.pId
where pName = ',pathway,'))')
sql <- gsub(pattern = '\t',replacement = '',sql)
sql <- gsub(pattern = '\n',replacement = '',sql)
sql
dataType = "ec"
dataType = "ec" #debug
if(skip){
cat("Skiping", dataType,  "pathways processing... \n\n")
return(0)
}
logFile <<- file.path(dirBase,"log","phase3.log")
cat("Starting", dataType,  "edges processing... \n\n")
cat(file = logFile, append = F,
"\n\n ***************************************************\n",
"Starting", dataType,  "edges processing...\n",
date(),"\n",
"***************************************************\n\n")
dbDir<<-file.path(dirBase,"data","database")
dbFile<<-file.path(dbDir,"dictionary.db")
#conect and test dictionary
dbCon <<- dbConnect(RSQLite::SQLite(), dbFile)
#reactions with problems
#0 substrate or 0 product
sql<-"SELECT rId
FROM (
select tr.rId, tr.rName,
sum(CASE WHEN spType = 's' THEN 1 ELSE 0 END) as s,
sum(CASE WHEN spType = 'p' THEN 1 ELSE 0 END) as p
from subsProd as ts inner JOIN
reaction as tr on tr.rid = ts.rid
where secondary = 0
GROUP by tr.rId
)
where s = 0 or p = 0"
badReactions <- dbGetQuery(dbCon,sql)
View(badReactions)
badReactions<-paste0(badReactions)
badReactions<- substring(badReactions,2)
sql <- paste0('select r.rId,
case when r.rReversible = 0 then "R" ELSE "I" END ||
" " || sp.spType || sp.cId as cId
from subsProd as sp INNER JOIN
reaction as r on r.rId = sp.rId
where sp.secondary == 0 and
r.rId not in ',
badReactions,
" order by r.rId, sp.spType DESC, sp.cId")
reactions <- dbGetQuery(dbCon,sql)
View(reactions)
tmp<-reactions %>%
group_by(rId) %>%
mutate(dup_count = sequence(dplyr::n()),
key = paste("cpd", dup_count, sep = "")) %>%
tidyr::spread(.,
key = key,
value = cId) %>%
tidyr::fill(dplyr::starts_with("cpd"), .direction = "up") %>%
dplyr::distinct(., rId, .keep_all = TRUE)
reactions2<- do.call(rbind,
apply(X = tmp, MARGIN = 1,
FUN = function(x){
txt<-''
for(idx in 3:length(x)){
if(is.na(x[idx])){
next
}
txt <- paste(txt, x[idx])
}
return(data.frame(rId=x[1],
cpd=txt,
stringsAsFactors = F))
}))
reactList<-reactions2 %>%
group_by(cpd) %>%
mutate(dup_count = sequence(dplyr::n()),
key = paste("rId", dup_count, sep = "")) %>%
tidyr::spread(.,
key = key,
value = rId) %>%
tidyr::fill(dplyr::starts_with("rId"), .direction = "up") %>%
dplyr::distinct(., cpd, .keep_all = TRUE)
#clean table and insert reaction correlations
prepareReacAssos()
View(reactList)
#reactions with problems
#0 substrate or 0 product
sql<-"SELECT rId
FROM (
select tr.rId, tr.rName,
sum(CASE WHEN spType = 's' THEN 1 ELSE 0 END) as s,
sum(CASE WHEN spType = 'p' THEN 1 ELSE 0 END) as p
from subsProd as ts inner JOIN
reaction as tr on tr.rid = ts.rid
where secondary = 0
GROUP by tr.rId
)
where s = 0 or p = 0"
badReactions <- dbGetQuery(dbCon,sql)
badReactions<-paste0(badReactions)
badReactions<- substring(badReactions,2)
sql <- paste0('select r.rId,
case when r.rReversible = 0 then "R" ELSE "I" END ||
" " || sp.spType || sp.cId as cId
from subsProd as sp INNER JOIN
reaction as r on r.rId = sp.rId
where sp.secondary == 0 and
r.rId not in ',
badReactions,
" order by r.rId, sp.spType DESC, sp.cId")
reactions <- dbGetQuery(dbCon,sql)
tmp<-reactions %>%
group_by(rId) %>%
mutate(dup_count = sequence(dplyr::n()),
key = paste("cpd", dup_count, sep = "")) %>%
tidyr::spread(.,
key = key,
value = cId) %>%
tidyr::fill(dplyr::starts_with("cpd"), .direction = "up") %>%
dplyr::distinct(., rId, .keep_all = TRUE)
reactions2<- do.call(rbind,
apply(X = tmp, MARGIN = 1,
FUN = function(x){
txt<-''
for(idx in 3:length(x)){
if(is.na(x[idx])){
next
}
txt <- paste(txt, x[idx])
}
return(data.frame(rId=x[1],
cpd=txt,
stringsAsFactors = F))
}))
reactList<-reactions2 %>%
group_by(cpd) %>%
mutate(dup_count = sequence(dplyr::n()),
key = paste("rId", dup_count, sep = "")) %>%
tidyr::spread(.,
key = key,
value = rId) %>%
tidyr::fill(dplyr::starts_with("rId"), .direction = "up") %>%
dplyr::distinct(., cpd, .keep_all = TRUE)
#clean table and insert reaction correlations
prepareReacAssos()
View(reactList)
View(reactions2)
reactions2$cpd2 <- gsub(pattern = "[IR]", replacement = '',reactions2$cpd
)
#*************************************************
#   ATTENTION!!! This code is provided "AS-IS",
#   with no warranties, express or implied, and
#   hereby disclaims all implied warranties,
#   including any warranty of merchantability and
#   warranty of fitness for a particular purpose.
#   It's released under GPL v2.
#*************************************************
#*************************************************
# Updated in 19/11/2020
#*************************************************
#main ----
# ver rota 00061
#Clean all variables ----
rm(list=ls(all=TRUE))
#Base location ----
#Did you change it to your base location?
dirBase<-"Place here the correct name of your work folder"
dirBase<<-"/home/clovis/Dropbox/projetos/Igor/gitAPs"
#figures
dirFig<<-file.path(dirBase,"figures")
#bin dir
binDir<<-file.path(dirBase,"bin")
#function dir
funcDir<<-file.path(binDir,"functions")
#database folder and file
dbDir<<-file.path(dirBase,"data","database")
dbTemplate <- file.path(dbDir,"APs.sql")
dbFile<<-file.path(dbDir,"dictionary.db")
#Organisms to process
#Put here your list of organisms inside the '...' separated by space and "..." as delimiter
orgList<-'"hsa" "mmu"'
# Import dependencies file to load dependencies and functions
source(file.path(funcDir,"dependencies.R"))
loadDependencies()
# Create the organisms list to be processed
createOrgList(funcDir = funcDir, orgList = orgList)
# Download the XML files from KEGG
# Parameters:
#   dirBase - name of your work folder
#   simProcesses - number of simultaneous download processes
#   dataType - KEGG database to download. Use "ec" for ec and "ko" for ko
#   organisms - list of organisms to download. Use <some> for the organisms
#     inside your orgList or <all> for all organisms in KEGG.
#     Edit the orgList above for personalized organisms
#   skip - don't execute this phase and a downloaded data
#     to execute your own download change skip to F
# The ec XML files  are necessary to generate the dictionary of nodes.
# Skip if using our pre downloaded ec XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ec",
skip = T)
# Download the organims XML files
# Skip if using our hsa and mmu pre downloaded XML files available on github
downloadKGML(dirBase = dirBase,
simProcesses = 1,
dataType = "ko",
organisms = "some",
skip = T)
#create a new empty database
# WARNING: all data will be lost
createDB(dbTemplate = dbTemplate,
dbFile = dbFile,
skip = T)
# read xml files and load data to database
generateDataFromKGML(dirBase = dirBase,
dataType = 'ec',
skip = T)
createNodesFromEC(dirBase = dirBase, skip = T)
showGraph(pathway = "ec00010", removeFake = T)
